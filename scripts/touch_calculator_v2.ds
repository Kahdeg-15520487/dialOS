/*
 * Touch Calculator App (Version 2)
 * A calculator with on-screen touch buttons for the M5 Dial
 * Uses individual button variables instead of arrays
 */

// Calculator state
var display: "0";
var operation: "";
var firstNumber: 0;
var secondNumber: 0;
var operatorPending: false;
var justCalculated: false;

// Button layout (4x5 grid for a calculator)
// Screen is 240x240, optimized for circular display
var buttonWidth: 40;
var buttonHeight: 25;
var buttonStartX: 25;
var buttonStartY: 70;
var buttonSpacingX: 47;
var buttonSpacingY: 30;

// Button definitions
class Button {
    x: int;
    y: int;
    width: int;
    height: int;
    text: string;
    value: string;
    
    constructor(x: int, y: int, text: string, value: string) {
        assign this.x x;
        assign this.y y;
        assign this.width buttonWidth;
        assign this.height buttonHeight;
        assign this.text text;
        assign this.value value;
    }
    
    draw(): void {
        // Draw button background
        os.display.drawRect(this.x, this.y, this.width, this.height, _color.darkgray, true);
        os.display.drawRect(this.x, this.y, this.width, this.height, _color.white, false);
        
        // Draw button text (centered) - improved centering for small buttons
        var textX: this.x + (this.width / 2) - (this.text.length * 3);
        var textY: this.y + (this.height / 2) - 4;
        os.display.drawText(textX, textY, this.text, _color.white, 1);
    }
    
    isPressed(touchX: int, touchY: int): bool {
        return (touchX >= this.x and touchX <= (this.x + this.width) and
                touchY >= this.y and touchY <= (this.y + this.height));
    }
}

// Individual button variables (Row 1)
var btnClear: Button(0, 0, "", "");
var btnNegate: Button(0, 0, "", "");
var btnPercent: Button(0, 0, "", "");
var btnDivide: Button(0, 0, "", "");

// Row 2
var btn7: Button(0, 0, "", "");
var btn8: Button(0, 0, "", "");
var btn9: Button(0, 0, "", "");
var btnMultiply: Button(0, 0, "", "");

// Row 3
var btn4: Button(0, 0, "", "");
var btn5: Button(0, 0, "", "");
var btn6: Button(0, 0, "", "");
var btnSubtract: Button(0, 0, "", "");

// Row 4
var btn1: Button(0, 0, "", "");
var btn2: Button(0, 0, "", "");
var btn3: Button(0, 0, "", "");
var btnAdd: Button(0, 0, "", "");

// Row 5
var btn0: Button(0, 0, "", "");
var btnDecimal: Button(0, 0, "", "");
var btnEquals: Button(0, 0, "", "");
var btnExit: Button(0, 0, "", "");

function setupButtons(): void {
    // Row 1: Clear, +/-, %, /
    assign btnClear Button(buttonStartX + 0 * buttonSpacingX, buttonStartY + 0 * buttonSpacingY, "C", "clear");
    assign btnNegate Button(buttonStartX + 1 * buttonSpacingX, buttonStartY + 0 * buttonSpacingY, "+-", "negate");
    assign btnPercent Button(buttonStartX + 2 * buttonSpacingX, buttonStartY + 0 * buttonSpacingY, "%", "percent");
    assign btnDivide Button(buttonStartX + 3 * buttonSpacingX, buttonStartY + 0 * buttonSpacingY, "/", "divide");
    
    // Row 2: 7, 8, 9, *
    assign btn7 Button(buttonStartX + 0 * buttonSpacingX, buttonStartY + 1 * buttonSpacingY, "7", "7");
    assign btn8 Button(buttonStartX + 1 * buttonSpacingX, buttonStartY + 1 * buttonSpacingY, "8", "8");
    assign btn9 Button(buttonStartX + 2 * buttonSpacingX, buttonStartY + 1 * buttonSpacingY, "9", "9");
    assign btnMultiply Button(buttonStartX + 3 * buttonSpacingX, buttonStartY + 1 * buttonSpacingY, "*", "multiply");
    
    // Row 3: 4, 5, 6, -
    assign btn4 Button(buttonStartX + 0 * buttonSpacingX, buttonStartY + 2 * buttonSpacingY, "4", "4");
    assign btn5 Button(buttonStartX + 1 * buttonSpacingX, buttonStartY + 2 * buttonSpacingY, "5", "5");
    assign btn6 Button(buttonStartX + 2 * buttonSpacingX, buttonStartY + 2 * buttonSpacingY, "6", "6");
    assign btnSubtract Button(buttonStartX + 3 * buttonSpacingX, buttonStartY + 2 * buttonSpacingY, "-", "subtract");
    
    // Row 4: 1, 2, 3, +
    assign btn1 Button(buttonStartX + 0 * buttonSpacingX, buttonStartY + 3 * buttonSpacingY, "1", "1");
    assign btn2 Button(buttonStartX + 1 * buttonSpacingX, buttonStartY + 3 * buttonSpacingY, "2", "2");
    assign btn3 Button(buttonStartX + 2 * buttonSpacingX, buttonStartY + 3 * buttonSpacingY, "3", "3");
    assign btnAdd Button(buttonStartX + 3 * buttonSpacingX, buttonStartY + 3 * buttonSpacingY, "+", "add");
    
    // Row 5: 0, ., =, X
    assign btn0 Button(buttonStartX + 0 * buttonSpacingX, buttonStartY + 4 * buttonSpacingY, "0", "0");
    assign btnDecimal Button(buttonStartX + 1 * buttonSpacingX, buttonStartY + 4 * buttonSpacingY, ".", "decimal");
    assign btnEquals Button(buttonStartX + 2 * buttonSpacingX, buttonStartY + 4 * buttonSpacingY, "=", "equals");
    assign btnExit Button(buttonStartX + 3 * buttonSpacingX, buttonStartY + 4 * buttonSpacingY, "X", "exit");
}

function drawDisplay(): void {
    // Clear display area - smaller and better positioned for circular screen
    os.display.drawRect(20, 15, 200, 45, _color.black, true);
    os.display.drawRect(20, 15, 200, 45, _color.gray, false);
    
    // Draw display text (right-aligned)
    var displayText: display;
    if (display.length > 10) {
        assign displayText "Error";
    }
    
    var textX: 200 - (displayText.length * 10);
    os.display.drawText(textX, 32, displayText, _color.green, 2);
}

function drawAllButtons(): void {
    btnClear.draw();
    btnNegate.draw();
    btnPercent.draw();
    btnDivide.draw();
    
    btn7.draw();
    btn8.draw();
    btn9.draw();
    btnMultiply.draw();
    
    btn4.draw();
    btn5.draw();
    btn6.draw();
    btnSubtract.draw();
    
    btn1.draw();
    btn2.draw();
    btn3.draw();
    btnAdd.draw();
    
    btn0.draw();
    btnDecimal.draw();
    btnEquals.draw();
    btnExit.draw();
}

function drawCalculator(): void {
    // Clear screen
    os.display.clear(_color.black);
    
    // Draw title - positioned better for circular screen
    os.display.drawText(85, 5, "Calculator", _color.white, 1);
    
    // Draw display
    drawDisplay();
    
    // Draw all buttons
    drawAllButtons();
}

function processDigit(digit: string): void {
    if (justCalculated) {
        assign display digit;
        assign justCalculated false;
    } else if (display = "0") {
        assign display digit;
    } else {
        // Use template string instead of string concatenation
        assign display `${display}${digit}`;
    }
}

function processOperator(op: string): void {
    if (operatorPending and not justCalculated) {
        calculate();
    }
    
    // Simple integer parsing for now
    var value: 0;
    if (display = "1") {
        assign value 1;
    } else if (display = "2") {
        assign value 2;
    } else if (display = "3") {
        assign value 3;
    } else if (display = "4") {
        assign value 4;
    } else if (display = "5") {
        assign value 5;
    } else if (display = "6") {
        assign value 6;
    } else if (display = "7") {
        assign value 7;
    } else if (display = "8") {
        assign value 8;
    } else if (display = "9") {
        assign value 9;
    } else if (display = "10") {
        assign value 10;
    } else if (display = "11") {
        assign value 11;
    } else if (display = "12") {
        assign value 12;
    } else if (display = "13") {
        assign value 13;
    } else if (display = "14") {
        assign value 14;
    } else if (display = "15") {
        assign value 15;
    } else if (display = "16") {
        assign value 16;
    } else if (display = "17") {
        assign value 17;
    } else if (display = "18") {
        assign value 18;
    } else if (display = "19") {
        assign value 19;
    } else if (display = "20") {
        assign value 20;
    }
    
    assign firstNumber value;
    assign operation op;
    assign operatorPending true;
    assign justCalculated false;
}

function calculate(): void {
    if (not operatorPending) {
        return;
    }
    
    // Simple integer parsing for second number
    var value: 0;
    if (display = "1") {
        assign value 1;
    } else if (display = "2") {
        assign value 2;
    } else if (display = "3") {
        assign value 3;
    } else if (display = "4") {
        assign value 4;
    } else if (display = "5") {
        assign value 5;
    } else if (display = "6") {
        assign value 6;
    } else if (display = "7") {
        assign value 7;
    } else if (display = "8") {
        assign value 8;
    } else if (display = "9") {
        assign value 9;
    } else if (display = "10") {
        assign value 10;
    } else if (display = "11") {
        assign value 11;
    } else if (display = "12") {
        assign value 12;
    } else if (display = "13") {
        assign value 13;
    } else if (display = "14") {
        assign value 14;
    } else if (display = "15") {
        assign value 15;
    } else if (display = "16") {
        assign value 16;
    } else if (display = "17") {
        assign value 17;
    } else if (display = "18") {
        assign value 18;
    } else if (display = "19") {
        assign value 19;
    } else if (display = "20") {
        assign value 20;
    }
    
    assign secondNumber value;
    
    var result: 0;
    if (operation = "add") {
        assign result firstNumber + secondNumber;
    } else if (operation = "subtract") {
        assign result firstNumber - secondNumber;
    } else if (operation = "multiply") {
        assign result firstNumber * secondNumber;
    } else if (operation = "divide") {
        if (secondNumber != 0) {
            assign result firstNumber / secondNumber;
        } else {
            assign display "Error";
            assign operatorPending false;
            return;
        }
    }
    
    // Convert result back to string (simplified)
    assign display `${result}`;
    
    assign operatorPending false;
    assign justCalculated true;
}

function handleButtonPress(buttonValue: string): void {
    if (buttonValue = "0" or buttonValue = "1" or buttonValue = "2" or buttonValue = "3" or
        buttonValue = "4" or buttonValue = "5" or buttonValue = "6" or buttonValue = "7" or
        buttonValue = "8" or buttonValue = "9") {
        processDigit(buttonValue);
    } else if (buttonValue = "add" or buttonValue = "subtract" or 
               buttonValue = "multiply" or buttonValue = "divide") {
        processOperator(buttonValue);
    } else if (buttonValue = "equals") {
        calculate();
    } else if (buttonValue = "clear") {
        assign display "0";
        assign operation "";
        assign firstNumber 0;
        assign secondNumber 0;
        assign operatorPending false;
        assign justCalculated false;
    } else if (buttonValue = "exit") {
        os.app.exit();
    }
    
    drawDisplay();
}

function highlightButton(btn: Button): void {
    os.display.drawRect(btn.x, btn.y, btn.width, btn.height, _color.yellow, false);
    os.system.sleep(100);
    btn.draw();
}

// Touch event handler
function onTouch(x: int, y: int): void {
    os.console.println(`Touch at (${x}, ${y})`);
    
    // Check which button was pressed (individual checks)
    if (btnClear.isPressed(x, y)) {
        os.console.println("Clear button pressed");
        highlightButton(btnClear);
        handleButtonPress(btnClear.value);
        return;
    }
    
    if (btnNegate.isPressed(x, y)) {
        os.console.println("Negate button pressed");
        highlightButton(btnNegate);
        handleButtonPress(btnNegate.value);
        return;
    }
    
    if (btnPercent.isPressed(x, y)) {
        os.console.println("Percent button pressed");
        highlightButton(btnPercent);
        handleButtonPress(btnPercent.value);
        return;
    }
    
    if (btnDivide.isPressed(x, y)) {
        os.console.println("Divide button pressed");
        highlightButton(btnDivide);
        handleButtonPress(btnDivide.value);
        return;
    }
    
    if (btn7.isPressed(x, y)) {
        os.console.println("7 button pressed");
        highlightButton(btn7);
        handleButtonPress(btn7.value);
        return;
    }
    
    if (btn8.isPressed(x, y)) {
        os.console.println("8 button pressed");
        highlightButton(btn8);
        handleButtonPress(btn8.value);
        return;
    }
    
    if (btn9.isPressed(x, y)) {
        os.console.println("9 button pressed");
        highlightButton(btn9);
        handleButtonPress(btn9.value);
        return;
    }
    
    if (btnMultiply.isPressed(x, y)) {
        os.console.println("Multiply button pressed");
        highlightButton(btnMultiply);
        handleButtonPress(btnMultiply.value);
        return;
    }
    
    if (btn4.isPressed(x, y)) {
        os.console.println("4 button pressed");
        highlightButton(btn4);
        handleButtonPress(btn4.value);
        return;
    }
    
    if (btn5.isPressed(x, y)) {
        os.console.println("5 button pressed");
        highlightButton(btn5);
        handleButtonPress(btn5.value);
        return;
    }
    
    if (btn6.isPressed(x, y)) {
        os.console.println("6 button pressed");
        highlightButton(btn6);
        handleButtonPress(btn6.value);
        return;
    }
    
    if (btnSubtract.isPressed(x, y)) {
        os.console.println("Subtract button pressed");
        highlightButton(btnSubtract);
        handleButtonPress(btnSubtract.value);
        return;
    }
    
    if (btn1.isPressed(x, y)) {
        os.console.println("1 button pressed");
        highlightButton(btn1);
        handleButtonPress(btn1.value);
        return;
    }
    
    if (btn2.isPressed(x, y)) {
        os.console.println("2 button pressed");
        highlightButton(btn2);
        handleButtonPress(btn2.value);
        return;
    }
    
    if (btn3.isPressed(x, y)) {
        os.console.println("3 button pressed");
        highlightButton(btn3);
        handleButtonPress(btn3.value);
        return;
    }
    
    if (btnAdd.isPressed(x, y)) {
        os.console.println("Add button pressed");
        highlightButton(btnAdd);
        handleButtonPress(btnAdd.value);
        return;
    }
    
    if (btn0.isPressed(x, y)) {
        os.console.println("0 button pressed");
        highlightButton(btn0);
        handleButtonPress(btn0.value);
        return;
    }
    
    if (btnDecimal.isPressed(x, y)) {
        os.console.println("Decimal button pressed");
        highlightButton(btnDecimal);
        handleButtonPress(btnDecimal.value);
        return;
    }
    
    if (btnEquals.isPressed(x, y)) {
        os.console.println("Equals button pressed");
        highlightButton(btnEquals);
        handleButtonPress(btnEquals.value);
        return;
    }
    
    if (btnExit.isPressed(x, y)) {
        os.console.println("Exit button pressed");
        highlightButton(btnExit);
        handleButtonPress(btnExit.value);
        return;
    }
}

// Main application
os.console.println("Touch Calculator V2 Started");
os.display.setTitle("Touch Calculator V2");

// Initialize buttons
setupButtons();

// Register touch callback
os.touch.onPress(onTouch);

// Initial draw
drawCalculator();

// Main event loop
var running: true;
while (running) {
    // Check for encoder button (alternative exit)
    if (os.encoder.getButton()) {
        assign running false;
        os.console.println("Calculator exiting via encoder button");
    }
    
    os.system.sleep(50);
}

// Cleanup
os.display.clear(_color.black);
os.display.drawText(80, 120, "Goodbye!", _color.white, 2);
os.system.sleep(1000);