# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build and package dialOS compiler

on:
  push:
    branches: ["master"]
    paths:
      - 'compiler/**'
      - 'include/vm/**'
      - 'src/vm/**'
      - '.github/workflows/cmake-multi-platform.yml'
  pull_request:
    branches: ["master"]

jobs:
  build:
    # Cross-platform matrix: Ubuntu, macOS, Windows
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        platform: [wasm, linux, windows]
        include:
          - platform: wasm
            os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            shell: bash
          - platform: linux
            os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            shell: bash
          - platform: windows
            os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            shell: pwsh
        # single configuration for now
        build_type: [Release]

    env:
      # Build inside the compiler subdirectory so CMake sees compiler/CMakeLists.txt
      BUILD_DIR: ${{ github.workspace }}/compiler/build

    steps:
      - uses: actions/checkout@v4

      - name: Configure CMake (Linux)
        if: matrix.platform == 'linux'
        run: |
          if [ -n "${VCPKG_TOOLCHAIN_FILE-}" ]; then
            cmake -B "$BUILD_DIR" \
              -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
              -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_TOOLCHAIN_FILE="$VCPKG_TOOLCHAIN_FILE" \
                -S "${GITHUB_WORKSPACE}/compiler"
          else
            cmake -B "$BUILD_DIR" \
              -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
              -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -S "${GITHUB_WORKSPACE}/compiler"
          fi
        shell: bash

      - name: Configure CMake (Windows)
        if: matrix.platform == 'windows'
        run: |
          ls
          if ($env:VCPKG_TOOLCHAIN_FILE) {
            cmake -B "$env:BUILD_DIR" -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S "$env:GITHUB_WORKSPACE\compiler" -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_TOOLCHAIN_FILE"
          } else {
            cmake -B "$env:BUILD_DIR" -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S "$env:GITHUB_WORKSPACE\compiler"
          }
        shell: pwsh

      - name: Build (Linux)
        if: matrix.platform == 'linux'
        run: |
          cmake --build "$BUILD_DIR" --config ${{ matrix.build_type }} --target compile -- -j$(nproc || echo 2)
        shell: bash

      - name: Build (Windows)
        if: matrix.platform == 'windows'
        run: |
          cmake --build "$env:BUILD_DIR" --config ${{ matrix.build_type }} --target compile
        shell: pwsh

      - name: Collect `compile` binary (Linux)
        if: matrix.platform == 'linux'
        run: |
          mkdir -p "$BUILD_DIR/install/bin"
          # Typical single-config build places the binary at build/compile
          if [ -f "$BUILD_DIR/compile" ]; then
            cp "$BUILD_DIR/compile" "$BUILD_DIR/install/bin/"
          elif [ -f "$BUILD_DIR/${{ matrix.build_type }}/compile" ]; then
            cp "$BUILD_DIR/${{ matrix.build_type }}/compile" "$BUILD_DIR/install/bin/"
          else
            echo "Cannot find compile binary in build directory"
            ls -la "$BUILD_DIR" || true
          fi
        shell: bash

      - name: Collect `compile` binary (Windows)
        if: matrix.platform == 'windows'
        run: |
          $installDir = "$env:BUILD_DIR\install\bin"
          New-Item -ItemType Directory -Path $installDir -Force | Out-Null
          $cfgPath = Join-Path $env:BUILD_DIR $env:BUILD_TYPE
          $exeCandidates = @("$env:BUILD_DIR\compile.exe", "$env:BUILD_DIR\${{ matrix.build_type }}\compile.exe", "$env:BUILD_DIR\Release\compile.exe")
          $found = $false
          foreach ($p in $exeCandidates) {
            if (Test-Path $p) {
              Copy-Item -Path $p -Destination $installDir -Force
              $found = $true
              break
            }
          }
          if (-not $found) { Write-Host "Cannot find compile.exe; listing build tree:"; Get-ChildItem -Recurse $env:BUILD_DIR | Select-Object FullName }
        shell: pwsh

      - name: Package artifacts (Linux)
        if: matrix.platform == 'linux'
        run: |
          cd "$BUILD_DIR/install"
          zip -r "$BUILD_DIR/linux-binaries.zip" bin || true
        shell: bash

      - name: Package artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $zipPath = "$env:BUILD_DIR\windows-binaries.zip"
          if (Test-Path "$env:BUILD_DIR\install") {
            Compress-Archive -Path "$env:BUILD_DIR\install\*" -DestinationPath $zipPath -Force
          } else {
            Write-Host "No install folder found; archiving build output folder instead"
            Compress-Archive -Path "$env:BUILD_DIR\*" -DestinationPath $zipPath -Force
          }
          Write-Host "Zipped to: $zipPath"
        shell: pwsh

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dialOS-compiler-${{ matrix.platform }}
          path: |
            ${{ env.BUILD_DIR }}/linux-binaries.zip
            ${{ env.BUILD_DIR }}/windows-binaries.zip
