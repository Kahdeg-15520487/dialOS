# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build and package dialOS compiler + SDL emulator

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    # Cross-platform matrix: Ubuntu, macOS, Windows
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            shell: bash
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            shell: bash
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            shell: pwsh
        # single configuration for now
        build_type: [Release]

    env:
      BUILD_DIR: ${{ github.workspace }}/build

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential curl unzip zip libsdl2-dev libsdl2-ttf-dev libsdl2-mixer-dev
      shell: bash


    - name: Setup vcpkg and SDL (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Clone and bootstrap vcpkg, then install SDL packages so CMake can find them
        git clone https://github.com/microsoft/vcpkg.git $env:RUNNER_TEMP\vcpkg
        Push-Location $env:RUNNER_TEMP\vcpkg
        .\bootstrap-vcpkg.bat -disableMetrics
        .\vcpkg.exe install sdl2 sdl2-ttf sdl2-mixer
        # expose vcpkg toolchain for CMake
        echo "VCPKG_TOOLCHAIN_FILE=$env:RUNNER_TEMP\vcpkg\scripts\buildsystems\vcpkg.cmake" | Out-File -FilePath $env:GITHUB_ENV -Encoding ascii -Append
        Pop-Location
      shell: pwsh

    - name: Configure CMake (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        if [ -n "${VCPKG_TOOLCHAIN_FILE-}" ]; then
          cmake -B "$BUILD_DIR" \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_TOOLCHAIN_FILE="$VCPKG_TOOLCHAIN_FILE" \
            -S "${GITHUB_WORKSPACE}"
        else
          cmake -B "$BUILD_DIR" \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -S "${GITHUB_WORKSPACE}"
        fi
      shell: bash

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if ($env:VCPKG_TOOLCHAIN_FILE) {
          cmake -B "$env:BUILD_DIR" -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S "$env:GITHUB_WORKSPACE" -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_TOOLCHAIN_FILE"
        } else {
          cmake -B "$env:BUILD_DIR" -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S "$env:GITHUB_WORKSPACE"
        }
      shell: pwsh

    - name: Build (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cmake --build "$BUILD_DIR" --config ${{ matrix.build_type }} -- -j$(nproc || echo 2)
      shell: bash

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cmake --build "$env:BUILD_DIR" --config ${{ matrix.build_type }}
      shell: pwsh

    - name: Install targets to a staging folder (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cmake --install "$BUILD_DIR" --config ${{ matrix.build_type }} --prefix "$BUILD_DIR/install"
      shell: bash

    - name: Install targets to a staging folder (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cmake --install "$env:BUILD_DIR" --config ${{ matrix.build_type }} --prefix "$env:BUILD_DIR\install"
      shell: pwsh

    - name: Package artifacts (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd "$BUILD_DIR/install"
        # create a zip of the installed runtime (bin/ lib/ etc)
        zip -r "$BUILD_DIR/${{ matrix.os }}-binaries.zip" . || true
      shell: bash

    - name: Package artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $zipPath = "$env:BUILD_DIR\windows-binaries.zip"
        if (Test-Path "$env:BUILD_DIR\install") {
          Compress-Archive -Path "$env:BUILD_DIR\install\*" -DestinationPath $zipPath -Force
        } else {
          Write-Host "No install folder found; archiving build output folder instead"
          Compress-Archive -Path "$env:BUILD_DIR\*" -DestinationPath $zipPath -Force
        }
        Write-Host "Zipped to: $zipPath"
      shell: pwsh

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: dialOS-binaries-${{ matrix.os }}
        path: |
          ${{ env.BUILD_DIR }}/${{ matrix.os }}-binaries.zip
          ${{ env.BUILD_DIR }}/windows-binaries.zip

    - name: Run tests (ctest) - Linux/macOS
      if: always() && matrix.os != 'windows-latest'
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        if [ -fCTestTestfile.cmake ] || [ -f CTestTestfile.cmake ]; then
          ctest --output-on-failure -C ${{ matrix.build_type }} || true
        else
          echo "No tests configured (CTest files not found)."
        fi
      shell: bash

    - name: Run tests (ctest) - Windows
      if: always() && matrix.os == 'windows-latest'
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        if (Test-Path CTestTestfile.cmake -or Test-Path CTestTestfile.cmake) {
          ctest --output-on-failure -C ${{ matrix.build_type }} || Write-Host 'ctest failed'
        } else {
          Write-Host 'No tests configured (CTest files not found).'
        }
      shell: pwsh
